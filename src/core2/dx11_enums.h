#pragma once
#include <array>

#include "src/core2/core2_config.h"
#include "src/core2/enums.h"

#ifdef CORE_API_DX11

constexpr std::array<DXGI_FORMAT, 6> DX11Formats = {
    DXGI_FORMAT_UNKNOWN,
    DXGI_FORMAT_B8G8R8A8_UNORM,
    DXGI_FORMAT_R32G32B32A32_FLOAT,
    DXGI_FORMAT_R32_FLOAT,
    DXGI_FORMAT_R16G16_FLOAT,
    DXGI_FORMAT_R16G16B16A16_FLOAT,
};
constexpr const DXGI_FORMAT& DX11FormatsAt(COREFORMAT f) {
  return DX11Formats[static_cast<uint8_t>(f)];
}

constexpr std::array<D3D11_CULL_MODE, 3> DX11CullModes = {
    D3D11_CULL_NONE,
    D3D11_CULL_FRONT,
    D3D11_CULL_BACK,
};

constexpr std::array<D3D11_FILL_MODE, 3> DX11FillModes = {
    D3D11_FILL_SOLID,
    D3D11_FILL_WIREFRAME,
    D3D11_FILL_WIREFRAME,
};

constexpr std::array<D3D11_COMPARISON_FUNC, 8> DX11ComparisonFunctions = {
    D3D11_COMPARISON_NEVER,         D3D11_COMPARISON_LESS,
    D3D11_COMPARISON_EQUAL,         D3D11_COMPARISON_LESS_EQUAL,
    D3D11_COMPARISON_GREATER,       D3D11_COMPARISON_NOT_EQUAL,
    D3D11_COMPARISON_GREATER_EQUAL, D3D11_COMPARISON_ALWAYS,
};
constexpr const D3D11_COMPARISON_FUNC& DX11ComparisonFunctionsAt(
    CORECOMPARISONFUNCTION f) {
  return DX11ComparisonFunctions[static_cast<uint16_t>(f)];
}

constexpr std::array<D3D11_BLEND, 13> DX11BlendFactors = {
    D3D11_BLEND_ZERO,
    D3D11_BLEND_ONE,
    D3D11_BLEND_SRC_COLOR,
    D3D11_BLEND_INV_SRC_COLOR,
    D3D11_BLEND_SRC_ALPHA,
    D3D11_BLEND_INV_SRC_ALPHA,
    D3D11_BLEND_DEST_ALPHA,
    D3D11_BLEND_INV_DEST_ALPHA,
    D3D11_BLEND_DEST_COLOR,
    D3D11_BLEND_INV_DEST_COLOR,
    D3D11_BLEND_SRC_ALPHA_SAT,
    D3D11_BLEND_BLEND_FACTOR,
    D3D11_BLEND_INV_BLEND_FACTOR,
};
constexpr const D3D11_BLEND& DX11BlendFactorsAt(COREBLENDFACTOR f) {
  return DX11BlendFactors[static_cast<uint16_t>(f)];
}

constexpr std::array<D3D11_BLEND_OP, 5> DX11BlendOps = {
    D3D11_BLEND_OP_ADD, D3D11_BLEND_OP_SUBTRACT, D3D11_BLEND_OP_REV_SUBTRACT,
    D3D11_BLEND_OP_MIN, D3D11_BLEND_OP_MAX,
};

constexpr std::array<D3D11_FILTER, 18> DX11Filters = {
    D3D11_FILTER_MIN_MAG_MIP_POINT,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR,
    D3D11_FILTER_ANISOTROPIC,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
    D3D11_FILTER_COMPARISON_ANISOTROPIC,
};

constexpr std::array<D3D11_TEXTURE_ADDRESS_MODE, 5> DX11TextureAddressModes = {
    D3D11_TEXTURE_ADDRESS_WRAP,        D3D11_TEXTURE_ADDRESS_MIRROR,
    D3D11_TEXTURE_ADDRESS_CLAMP,       D3D11_TEXTURE_ADDRESS_BORDER,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE,
};

COREFORMAT GetFormat(DXGI_FORMAT Format);

#endif
