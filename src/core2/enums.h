#pragma once
#include <array>
#include <vector>

#include "src/base/enum_helpers.h"

enum class COREDEVICEAPI : uint8_t {
  COREAPI_DX9,
  COREAPI_DX11,
  COREAPI_OPENGL,
  COREAPI_CORE1WRAPPER,
};

enum class COREFORMAT : uint8_t {
  COREFMT_UNKNOWN = 0,
  COREFMT_A8R8G8B8 = 1,
  COREFMT_A32B32G32R32F = 2,
  COREFMT_R32F = 3,
  COREFMT_G16R16F = 4,
  COREFMT_R16G16B16A16_FLOAT = 5,
};

enum class COREVERTEXATTRIBUTE : int16_t {
  COREVXATTR_STOP = -1,
  COREVXATTR_POSITION3 = 0,
  COREVXATTR_POSITION4 = 1,
  COREVXATTR_NORMAL3 = 2,
  COREVXATTR_TEXCOORD2 = 3,
  COREVXATTR_COLOR4 = 4,
  COREVXATTR_COLOR16 = 5,
  COREVXATTR_POSITIONT4 = 6,
  COREVXATTR_TEXCOORD4 = 7,
};

enum class CORECOMPARISONFUNCTION : uint16_t {
  CORECMP_NEVER = 0,
  CORECMP_LESS = 1,
  CORECMP_EQUAL = 2,
  CORECMP_LEQUAL = 3,
  CORECMP_GREATER = 4,
  CORECMP_NOTEQUAL = 5,
  CORECMP_GEQUAL = 6,
  CORECMP_ALWAYS = 7,
};

using CORECMP = EnumNamePair<CORECOMPARISONFUNCTION>;
constexpr std::array ComparisonFunctionNames = {
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_NEVER, ("Never")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_LESS, ("Less")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_EQUAL, ("Equal")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_LEQUAL, ("LessEqual")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_GREATER, ("Greater")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_NOTEQUAL, ("NotEqual")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_GEQUAL, ("GreaterEqual")},
    CORECMP{CORECOMPARISONFUNCTION::CORECMP_ALWAYS, ("Always")}};

enum class COREBLENDFACTOR : uint16_t {
  COREBLEND_ZERO = 0,
  COREBLEND_ONE = 1,
  COREBLEND_SRCCOL = 2,
  COREBLEND_INVSRCCOL = 3,
  COREBLEND_SRCALPHA = 4,
  COREBLEND_INVSRCALPHA = 5,
  COREBLEND_DSTALPHA = 6,
  COREBLEND_INVDSTALPHA = 7,
  COREBLEND_DSTCOLOR = 8,
  COREBLEND_INVDSTCOLOR = 9,
  COREBLEND_SRCALPHASATURATE = 10,
  COREBLEND_BLENDFACTOR = 11,
  COREBLEND_INVBLENDFACTOR = 12,
};

using COREBLEND = EnumNamePair<COREBLENDFACTOR>;
constexpr std::array BlendFactorNames = {
    COREBLEND{COREBLENDFACTOR::COREBLEND_ZERO, ("Zero")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_ONE, ("One")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_SRCCOL, ("SrcCol")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_INVSRCCOL, ("InvSrcCol")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_SRCALPHA, ("SrcAlpha")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_INVSRCALPHA, ("InvSrcAlpha")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_DSTALPHA, ("DstAlpha")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_INVDSTALPHA, ("InvDstAlpha")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_DSTCOLOR, ("DstCol")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_INVDSTCOLOR, ("InvDstCol")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_SRCALPHASATURATE,
              ("SrcAlphaSaturate")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_BLENDFACTOR, ("BlendFactor")},
    COREBLEND{COREBLENDFACTOR::COREBLEND_INVBLENDFACTOR, ("InvBlendFactor")}};

enum class COREBLENDOP : uint8_t {
  COREBLENDOP_ADD = 0,
  COREBLENDOP_SUB = 1,
  COREBLENDOP_REVSUB = 2,
  COREBLENDOP_MIN = 3,
  COREBLENDOP_MAX = 4,
};
using COREBLENDO = EnumNamePair<COREBLENDOP>;
constexpr std::array BlendOpNames = {
    COREBLENDO{COREBLENDOP::COREBLENDOP_ADD, ("Add")},
    COREBLENDO{COREBLENDOP::COREBLENDOP_SUB, ("Sub")},
    COREBLENDO{COREBLENDOP::COREBLENDOP_REVSUB, ("RevSub")},
    COREBLENDO{COREBLENDOP::COREBLENDOP_MIN, ("Min")},
    COREBLENDO{COREBLENDOP::COREBLENDOP_MAX, ("Max")}};

enum CORECULLMODE {
  CORECULL_NONE = 0,
  CORECULL_CW = 1,
  CORECULL_CCW = 2,
};
constexpr std::array CullModeNames = {
    EnumNamePair<CORECULLMODE>{CORECULL_NONE, ("None")},
    EnumNamePair<CORECULLMODE>{CORECULL_CW, ("CW")},
    EnumNamePair<CORECULLMODE>{CORECULL_CCW, ("CCW")}};

enum COREFILLMODE {
  COREFILL_SOLID = 0,
  COREFILL_EDGES = 1,
  COREFILL_POINTS = 2,
};
constexpr std::array FillModeNames = {
    EnumNamePair<COREFILLMODE>{COREFILL_SOLID, ("Solid")},
    EnumNamePair<COREFILLMODE>{COREFILL_EDGES, ("Edges")},
    EnumNamePair<COREFILLMODE>{COREFILL_POINTS, ("Points")}};

enum CORETEXTUREADDRESSMODE {
  CORETEXADDRESS_WRAP = 0,
  CORETEXADDRESS_MIRROR = 1,
  CORETEXADDRESS_CLAMP = 2,
  CORETEXADDRESS_BORDER = 3,
  CORETEXADDRESS_MIRRORONCE = 4,
};
constexpr std::array AddressModeNames = {
    EnumNamePair<CORETEXTUREADDRESSMODE>{CORETEXADDRESS_WRAP, ("Wrap")},
    EnumNamePair<CORETEXTUREADDRESSMODE>{CORETEXADDRESS_MIRROR, ("Mirror")},
    EnumNamePair<CORETEXTUREADDRESSMODE>{CORETEXADDRESS_CLAMP, ("Clamp")},
    EnumNamePair<CORETEXTUREADDRESSMODE>{CORETEXADDRESS_BORDER, ("Border")},
    EnumNamePair<CORETEXTUREADDRESSMODE>{CORETEXADDRESS_MIRRORONCE,
                                         ("MirrorOnce")}};

enum CORETEXTUREWRAPMODE {
  CORETEXWRAP_NONE = 0,
  CORETEXWRAP_U = 1,
  CORETEXWRAP_V = 2,
  CORETEXWRAP_UV = 3,
  CORETEXWRAP_W = 4,
  CORETEXWRAP_UW = 5,
  CORETEXWRAP_VW = 6,
  CORETEXWRAP_UVW = 7,
};

enum CORERENDERSTATE {
  CORERS_VERTEXSHADER = 0,
  CORERS_PIXELSHADER,
  CORERS_GEOMETRYSHADER,
  CORERS_HULLSHADER,
  CORERS_DOMAINSHADER,
  CORERS_TEXTURE,
  CORERS_VERTEXFORMAT,
  CORERS_INDEXBUFFER,
  CORERS_SAMPLERSTATE,
  CORERS_BLENDSTATE,
  CORERS_RASTERIZERSTATE,
  CORERS_DEPTHSTENCILSTATE,
  CORERS_COMPUTESHADER,
};

//#define CORE_VS_SAMPLERCOUNT 4
//#define CORE_GS_SAMPLERCOUNT 4
//#define CORE_PS_SAMPLERCOUNT 16

enum CORESAMPLER {
  CORESMP_PS0 = 0,
  CORESMP_PS1 = 1,
  CORESMP_PS2 = 2,
  CORESMP_PS3 = 3,
  CORESMP_PS4 = 4,
  CORESMP_PS5 = 5,
  CORESMP_PS6 = 6,
  CORESMP_PS7 = 7,
  CORESMP_PS8 = 8,
  CORESMP_PS9 = 9,
  CORESMP_PS10 = 10,
  CORESMP_PS11 = 11,
  CORESMP_PS12 = 12,
  CORESMP_PS13 = 13,
  CORESMP_PS14 = 14,
  CORESMP_PS15 = 15,
  CORESMP_VS0 = 100,
  CORESMP_VS1 = 101,
  CORESMP_VS2 = 102,
  CORESMP_VS3 = 103,
  CORESMP_GS0 = 200,
  CORESMP_GS1 = 201,
  CORESMP_GS2 = 202,
  CORESMP_GS3 = 203,
};
constexpr std::array SamplerNames = {
    EnumNamePair<CORESAMPLER>{CORESMP_PS0, ("PS0")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS1, ("PS1")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS2, ("PS2")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS3, ("PS3")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS4, ("PS4")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS5, ("PS5")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS6, ("PS6")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS7, ("PS7")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS8, ("PS8")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS9, ("PS9")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS10, ("PS10")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS11, ("PS11")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS12, ("PS12")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS13, ("PS13")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS14, ("PS14")},
    EnumNamePair<CORESAMPLER>{CORESMP_PS15, ("PS15")},
    EnumNamePair<CORESAMPLER>{CORESMP_VS0, ("VS0")},
    EnumNamePair<CORESAMPLER>{CORESMP_VS1, ("VS1")},
    EnumNamePair<CORESAMPLER>{CORESMP_VS2, ("VS2")},
    EnumNamePair<CORESAMPLER>{CORESMP_VS3, ("VS3")},
    EnumNamePair<CORESAMPLER>{CORESMP_GS0, ("GS0")},
    EnumNamePair<CORESAMPLER>{CORESMP_GS1, ("GS1")},
    EnumNamePair<CORESAMPLER>{CORESMP_GS2, ("GS2")},
    EnumNamePair<CORESAMPLER>{CORESMP_GS3, ("GS3")}};

enum COREFILTER {
  COREFILTER_MIN_MAG_MIP_POINT = 0,
  COREFILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
  COREFILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 2,
  COREFILTER_MIN_POINT_MAG_MIP_LINEAR = 3,
  COREFILTER_MIN_LINEAR_MAG_MIP_POINT = 4,
  COREFILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 5,
  COREFILTER_MIN_MAG_LINEAR_MIP_POINT = 6,
  COREFILTER_MIN_MAG_MIP_LINEAR = 7,
  COREFILTER_ANISOTROPIC = 8,
  COREFILTER_COMPARISON_MIN_MAG_MIP_POINT = 9,
  COREFILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 10,
  COREFILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 11,
  COREFILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 12,
  COREFILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 13,
  COREFILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 14,
  COREFILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 15,
  COREFILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 16,
  COREFILTER_COMPARISON_ANISOTROPIC = 17,
};
constexpr std::array FilterNames = {
    EnumNamePair<COREFILTER>{COREFILTER_MIN_MAG_MIP_POINT,
                             ("Min_Mag_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_MAG_POINT_MIP_LINEAR,
                             ("Min_Mag_Point_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
                             ("Min_Point_Mag_Linear_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_POINT_MAG_MIP_LINEAR,
                             ("Min_Point_Mag_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_LINEAR_MAG_MIP_POINT,
                             ("Min_Linear_Mag_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
                             ("Min_Linear_Mag_Point_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_MAG_LINEAR_MIP_POINT,
                             ("Min_Mag_Linear_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_MIN_MAG_MIP_LINEAR,
                             ("Min_Mag_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_ANISOTROPIC, ("Anisotropic")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_MAG_MIP_POINT,
                             ("Comparison_Min_Mag_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
                             ("Comparison_Min_Mag_Point_Mip_Linear")},
    EnumNamePair<COREFILTER>{
        COREFILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
        ("Comparison_Min_Point_Mag_Linear_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
                             ("Comparison_Min_Point_Mag_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
                             ("Comparison_Min_Linear_Mag_Mip_Point")},
    EnumNamePair<COREFILTER>{
        COREFILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
        ("Comparison_Min_Linear_Mag_Point_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
                             ("Comparison_Min_Mag_Linear_Mip_Point")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
                             ("Comparison_Min_Mag_Mip_Linear")},
    EnumNamePair<COREFILTER>{COREFILTER_COMPARISON_ANISOTROPIC,
                             ("Comparison_Anisotropic")}};

constexpr int32_t CORELOCK_READONLY = 0x00000010L;
constexpr int32_t CORELOCK_DISCARD = 0x00002000L;
constexpr int32_t CORELOCK_NOOVERWRITE = 0x00001000L;
constexpr int32_t CORELOCK_NOSYSLOCK = 0x00000800L;
constexpr int32_t CORELOCK_DONOTWAIT = 0x00004000L;
